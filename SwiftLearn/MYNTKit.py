import AVFoundationimport FMDBimport Foundationimport INTULocationManagerimport MYNTKit.I18nManagerimport MYNTKit.MTBluetoothimport MYNTKit.MTKeyUtilsimport MYNTKit.MTSystemimport MYNTKit.MTNTKitimport MYNTKit.NSImage_Grayimport MYNTKitimport MYNTKit.Swiftimport MapKitimport MediaPlayerimport MyntCoreBluetoothimport MyntCoreBluetooth.STPrivateFunctionimport Realmimport RealmSwiftimport SCloundKitimport SlightechKitimport SwiftOnoneSupportimport SystemConfiguration.CaptiveNetworkimport SystemConfigurationimport UIKit//! Project version number for MYNTKitpublic var MYNTKitVersionNumber: Doubleextension SCControlMode : EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}extension SCControlMode {		public var smallAvatar: UIImage? { get }}extension SCClickValue {		public var name: String { get }	public var smallAvatar: UIImage? { get }}extension UIView {		/**	震动	*/	public func shake(dValue: CGFloat = default, repeatCount: Float = default)}extension UIView {		/**	波纹动画	- parameter color: 波纹颜色	*/	public func rippleAnimate(color: UIColor, scale: CGFloat)}extension SCLocationFrequency {		public static var all: [SCloundKit.SCLocationFrequency]	public init(value: Int?)	public var time: Int { get }}extension SCLocationFrequency : EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}extension SCSensitivity {		public static var all: [SCloundKit.SCSensitivity]	public init(value: Int?)	//延迟时间(秒)	public var alarmDelay: Int { get }}extension SCSensitivity : EnumPropertyProtocol {		//名字	public var name: String { get }	public var image: UIImage? { get }}extension CALayer {		public func shake(dValue: CGFloat = default, duration: CFTimeInterval = default, repeatCount: Float = default)}extension UIImage {		public class func create(with radius: CGFloat, padding: CGFloat = default, icon: UIImage?, color: MYNTKit.GradientColor? = default) ->		UIImage?}extension SCDeviceUsage {		public init(value: Int?)	public var myntName: String { get }	public func myntAvatar(mynt: MYNTKit.Mynt) -> UIImage?	public var usageColor: MYNTKit.GradientColor { get }}extension SCDeviceUsage {		public static var all: [SCloundKit.SCDeviceUsage] { get }	public func defaultValue(sn: String) -> MYNTKit.Mynt.Usage }extension SCDeviceUsage: EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}/**硬件类型- CC25: CC2541- CC26: CC2640- CC26SE: CC2640 精简- CC26GPS: CC2640 + GPS*/extension MYNTHardwareType {		public var name: String { get }	public var myntType: SCloundKit.SCDeviceType { get }}extension SCDeviceAlarm {		public static var all: [SCloundKit.SCDeviceAlarm]	public init(value: Int?)	//报警次数(次数)	public var alarmCount: Int { get }	//铃声文件名	public var soundName: String { get }}extension SCDeviceAlarm : EnumPropertyProtocol {		//名字	public var name: String { get }	public var image: UIImage? { get }}extension SCloundKit.SCPay.SCOrder {		/**	 *	 *	 */	 public func orderDetail(success: @escaping {SCloudKit.SCPay.SCOrder} -> Swift.Void, failure: MyntFailureHandler)}extension SCDeviceType {		public var name: String { get }	public var typeName: String { get }	public var hardwareTypes: [MYNTHardwareType] { get }}extension SCControlMode {		public static var all: [SCloudKit.SCControlMode]	public func defaultValue(sn: String) -> MYNTKit.Mynt.Control}public class AlarmManager : NSObject, AVAudioPlayerDelegate {		public static let shared: MYNTKit.AlarmManager	/**	执行报警	- parameter soundName: 报警音乐名	*/	public func execAlarm(_ soundName: String?)	/**	取消报警	*/	public func cancelAlarm()	/**	查找手机	- parameter loops: 是否重复播放	*/	public func execFindPhone(_ loops: Bool = default)	/**	停止查找小觅	*/	public func cancelFindPhone()	public func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool)}//主题色public class ColorStyle {		public static let kTunaColor: UIColor	public static let kWriteColor: UIColor	public static let kTunaGradientColor: MYNTKit.GradientColor	public static let kBlueGradientColor: MYNTKit.GradientColor	public static let kRedGradientColor: MYNTKit.GradientColor	public static let kGreenGradientColor: MYNTKit.GradientColor	public static let kOfflineGradientColor: MYNTKit.GradientColor	public static let kGoldTips: MYNTKit.GradientColor	public static let kOrange: MYNTKit.GradientColor	public static let kPortlandOrange: MYNTKit.GradientColor	public static let kCarminePink: MYNTKit.GradientColor	public static let kOliveHaze: MYNTKit.GradientColor	public static let kMantis: MYNTKit.GradientColor	public static let kShamrock: MYNTKit.GradientColor	public static let kSpiroDiscoBall: MYNTKit.GradientColor	public static let kDarkElectricBlue: MYNTKit.GradientColor	public static let kFrenchRose: MYNTKit.GradientColor	public static let kSoftPurple: MYNTKit.GradientColor	public static let kMediumSlateBlue: MYNTKit.GradientColor}public protocol EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}/**固件类型- BLE: BLE模式- HID: HID模式*/public enum Firmware {		case ble	case hid	public var name : String { get }}/** * 渐变色 */public struct GradientColor {		public var start: UIColor	public var end: UIColor	public init(start: UIColor, end: UIColor)	public init(color: String)	public var hexString: String { get }}public class JPushManager : NSObject {		public static let shared: MYNTKit.JPushManager	weak public var delegate: JPushManagerDelegate?	public func didReceiveNotification(type: JPushType, info: [AnyHashable : Any])}public protocol JPushManagerDelegate : NSObjectProtocol {		public func push(manager: MYNTKit.JPushManager, didRegisterAlias alias: String?)	public func push(manager: MYNTKit.JPushManager, didRegisterTags tags: [String])	public func push(manager: MYNTKit.JPushManager, didRemoveLocationNotification key: String?)}public class MKImageCache : NSObject {		public static let shared: MYNTKit.MKImageCache	public func downUserAvatar(url: String, handler: @escaping (UIImage?) -> Swift.Void)	public func down(url: String, handler: @escaping (UIImage?) -> Swift.Void)	pubic func load(key: String, handler: @escaping (UIImage?) -> Swift.Void)	public func save(key: String, image: UIImage?)}public func MTLocalizedString(_ key: String, comment: String) -> String/**设备丢失状态- Normal: 正常状态- ReportLost: 报丢状态*/@objc public enum MTMyntLostState : Int {		case normal	case reportLost}public class MTPushMessage : NSObject {		public class func sendMessage(image: UIImage? = default, title: String, subtitle: String)}public class MYNTKit : NSObject {		public static let shared MYNTKit.MYNTKit	public var state: CBCentralManagerState { get }	public var mynts: [MYNTKit.Mynt] { get }	public var user: MYNTKit.User? { get }	public var safeZones: [MYNTKit.SafeZone] { get }	public var isCloseAlarmInSafeZone: Bool	public func initMYNTKit(complete: @escaping () -> Swift.Void)	public func registerJPush()}extension MYNTKit : INTULocationManagerDelegate {		public func locationManager(_ manager: INTULocationManager, didPrintLog log: String)}extension MYNTKit {		public func addMyntKitDelegate(key: String, delegate: MyntKitDelegate)	public func removeMyntKitDelegate(key: String)}extension MYNTKit {		/**		搜索小觅（进行蓝牙搜索）		*/	public func startScan()	/**		搜索小觅 (仅用于搜索新设备)		*/	public func startScanNewMynt(handler: @escaping MYNTKit.ScanHandler)	/**		停止搜索小觅（仅用于搜索新设备）		*/	public func stopScanNewMynt()}extension MYNTKit : SCloudDelegate {		public func cloud(cloud: SCloudKit.SCloud, didRequest url: String, time: TimeInterval)	public func cloud(cloud: SCloudKit.SCloud, didPrintLog log: String)}@objc public protocol MYNTKitDelegate : MyntDelegate, UserDelegate, SafeZoneDelegate {		@objc optional public func myntKit(myntKit: MYNTKit.MYNTKit, didUpdateCentralState state: CBCentralManagerState)	@objc optional public func myntKit(myntKit: MYNTkit.MYNTKit, didAddMynt mynt: MYNTKit.Mynt)	@objc optional public func myntKit(myntkit: MYNTKit.MYNTKit, didRemoveMynt mynt: MYNTKit.Mynt)	@objc optional public func myntKit(myntKit: MYNTKit.MYNTKit, didFoundNewSafeZone safeZone: MYNTKit.SafeZone)	@objc optional public func myntKit(myntKit: MYNTKit.MYNTkit, didReceverAd url: String)}public enum MYNTKitError : Error {		case notGPS}@objc public enum MYNTUIState : Int {		case none	case online	case offline	case report	case connecting}public class MapNavigationKit : NSObject {		public enum MapType {		case apple		case google		case baidu		case amap		case tencent	}	public static let shared: MYNTKit.MapNavigationKit	public func selectMapApp(fromCoordinate: CLLocationCoordinate2D, toCoordinate: CLLocationCoordinate2D, view: UIView)}extension MapNavigationKit : UIActionSheetDelegate {		public func actionSheet(_ actionSheet: UIActionSheet, clickedButtonAt buttonIndex: Int)}public class Mynt : SlightechKit.SKSQLiteModel {		public class Location : NSObject {		public var coordinate: CLLocationCoordinate2D		public var locationTime: TimeInterval		public var locationType: SCloudKit.SCDevice.SCLocation.Type	}	//最后一次断线时间	dynamic public var lastDisconnectTime: Int	//连接类型	dynamic public var connectType: MYNTKit.MyntConnectType	dynamic public var lostState: MYNTKit.MTMyntLostState	dynamic public var name: String	dynamic public var sn: String	dynamic public var iccid: String	dynamic public var firmware: String	dynamic public var hardware: String	dynamic public var software: String	dynamic public var latitude: CLLocationDegress	dynamic public var longitude: CLLocationDegress	dynamic public var radius: Int	dynamic public var locationTime: Int	//分享策略	dynamic public var shareUsersJson: String	//场景	dynamic public var usage: SCloudKit.SCDeviceUsage	//场景颜色	dynamic public var usageColor: String	//场景颜色	dynamic public var usageGradientColor: String	dynamic public var usage: [MYNTKit.Mynt.Usage]	//电池	dynamic public var battery: Int	//设备类型	dynamic public var myntType: SCloudKit.SCDeviceType	dynamic public var isActivityTracking: Bool	dynamic public var stepGoal: Int	dynamic public var calGoal: Int	dynamic public var step: Int	dynamic public var cal: Int	public var command: SCloudKit.SCDeviceCommand	dynamic public var workStatus: SCloudKit.SCWorkStatus	dynamic public var simStatus: SCloudKit.SCSIMStatus	dynamic public var simType: SCloudKit.SCSIMType	dynamic public var expiryTime: Int	dynamic public var isArrearage: Bool	dynamic public var isStatic: Bool	dynamic public var canEdit: Bool	dynamic public var isOwner: Bool	dynamic public var myntSyncTime: Int	dynamic public var isShowWillOverdueDialog: Bool	dynamic public var isShowOverduedDialog: Bool	dynamic public var isShowDeactivatedDialog: Bool	dynamic public var isLowPowerMode: Bool	dynamic public var isHIDMode: Bool	dynamic public var isEnableControl: Bool	dynamic public var control: SCloudKit.SCControlMode	dynamic public var controls: [MYNTKit.Mynt.Control]	dynamic public var isOpenActivityAlarm: Bool	dynamic public var activityAlarm: SCloudKit.SCDeviceAlarm	dynamic public var activityAlarmStep: Int	dynamic public var activityAlarmTime: Int	override public var sk_primaryKeys: [String] { get }	override public var sk_ignoreKeys: [String] { get }	dynamic public var isNeverShowUpdateFirmware: Bool	dynamic public var avatar: UIImage?	public var state: MYNTState { get }	public var isAlarm: Bool { get }	dynamic public var totallyAddress: String	dynamic public var simplifyAddress: String	dynamic public var coordinate: CLLocationCoordinate2D	public var ignoreKVOKeys: [String] { get }	public var addKVOKeys: [String] { get }	weak public var stMynt: STMynt?	public var hardwareType: MYNTHardwareType { get }	public var needAlarmWhenDisconnect: Bool	required public init()	override public func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)}extension Mynt {		public class Control : SlightechKit.SKSQLiteModel {		public var name: String		public var value: SCloudKit.SCControlMode		public var sn: String		public var click: SCloudKit.SCClickValue		public var doubleClick: SCloudKit.SCClickValue		public var tripleClick: SCloudKit.SCClickValue		public var hold: SCloudKit.SCClickValue		public var clickHold: SCloudKit.SCClickValue		override public var sk_primaryKeys: [String] { get }		override public var sk_tableName: String { get }		public func equals(_ control: MYNTKit.Mynt.Control) -> Bool	}}extension Mynt {		public class Usage : SlightechKit.SKSQLiteModel {		public var name: String		public var value: SCloudKit.SCDeviceUsage		public var sn: String		public var phoneAlarm: SCloudKit.SCDeviceAlarm		public var myntAlarm: SCloudKit.SCDeviceAlarm		public var sensitivity: SCloudKit.SCSensitivity		public var locationFrequency: SCloudKit.SCLocationFrequency		override public var sk_primaryKeys: [String] { get }		override public var sk_tableName: String { get }		public func equals(_ usageValue: MYNTKit.Mynt.Usage) -> Bool 	}}extension Mynt {		/**	 * 下载步数记录	 *	 * @param start 开始时间	 * @param end   结束时间	 */	public func downStepLocations(start: Int = default, end: Int = default, success: (([SCloudKit.SCDevice.SCLocation]) -> Swift.Void)? =		default, failure: MyntFailureHandler)	/**	 * 下载运动数据	 *	 * @param start 开始时间	 * @param end   开始时间	 */	public func downloadActivityInfo(start: Int = default, end: Int = default, success: MyntSuccessHandler = default, failure: MyntFailureHandler)	/**	 * 更新运动目标	 *	 * @param exerciseGoal 目标数量	 */	public func uploadStepGoal(stepGoal: Int, success: MyntSuccessHandler, failure: MyntFailureHandler)	/**	 * 设置运动报警	 *	 * @param isOpenActivityAlarm 无活动报警开关	 * @param activityAlarm 	  无活动报警类型	 * @param activityAlarmStep   无活动报警步数	 * @param activityAlarmTime   无活动报警时间	 */	public func uploadActivityAlarm(isOpenActivityAlarm: Bool? = default, activityAlarm: SCloudKit.SCDeviceAlarm? = default, activityAlarmStep:		Int? = default, activityAlarmTime: Int? = default, success: MyntSuccessHandler, failure: MyntFailureHandler)}extension Mynt {		public enum BindState : Int {		case none		case connecting		case binding		case connected		case disconnected	}	public var rssi: Int { get }	/**		初次绑定		*/	public func bind(handler: (((MYNTKit.Mynt, MYNTKit.Mynt.BindState, String?) -> Swift.Void)?)	/**	 	连接	 	*/	public func disconnect()	/**	 	查找小觅	 	*/	public func findMynt()	public func updateFirmware(start: (() -> Data?)?, progress: ((CGFloat) -> Swift.Void)?, success: (() -> Swift.Void)?, failure: ((Error?) -> Swift.Void)?)	public func writeMotionSensibility(sensitivity: Int = default, handler: ((Error?) -> Swift.Void)? = default)	public func writeDBM(dbm: Int = default, handler: ((Error?) -> Swift.Void)? = default)	public func readICCID(isIgnoreTime: Bool = default, handler: ((String?) -> Swift.Void)? = default)	/**		读取电量		*/	public func readBattery()	/**		设备关机		*/	public func shutdown()	/**		设备重启		*/	public func startup()	/**		设置apn		*/	public func setAPN(apn: String, handler: ((Error?) -> Swift.Void)?)}extension Mynt {		public func startEduFindMynt(_ block: ((MYNTKit.Mynt) -> Swift.Void)?)	public func stopEduFindMynt()	public func startEduFindPhone(_ block: ((MYNTKit.Mynt) -> Swift.Void)?)	public func stopEduFindPhone()}extension Mynt: STMyntDelegate {		public func myntDidStartConnect(_ stMynt: STMynt)	public func myntDidConnected(_ stMynt: STMynt)	public func mynt(_ stMynt: STMynt, didDisconnected error: Error?)	public func mynt(_ stMynt: STMynt, didUpdateBattery batteries: [NSNumber])	public func mynt(_ mynt: STMynt, didUpdateBattery batteries: [NSNumber])	public func mynt(_ mynt: STMynt, didUpdateAlarmState isAlarm: Bool)	public func mynt(_ stMynt: STMynt, didUpdatePassword password: String?)	public func mynt(_ mynt: STMynt, didReceive clickEvent: MYNTClickEvent)	public func didRequestPassword(_ mynt: STMynt) -> String?	public func didRequestAutoconnect(_ mynt: STMynt) -> Bool	public func didNeedRestartBluetooth(_ mynt: STMynt)}extension Mynt {		/**	 * 流量包	 *	 */	public func packages(success: @escaping ([SCloudKit.SCPay.SCPackage]) -> Swift.Void, failure: MyntFailureHandler)	/**	 * 微信支付	 *	 * @param month 月份	 */	public func wechatPay(month: Int, success: @escaping (SCloudKit.SCPay.SCWechatPayParams) -> Swift.Void, failure: MyntFailureHandler)	/**	 * 订单列表	 *	 *  @param page 		页数（1开始， +1 计算）	 *  @param pageSize 	每页数量	 *	 */	public func orderList(page: Int = default, pageSize: Int = default, success: @escaping ([SCloudKit.SCPay.SCOrder]) -> Swift.Void, failure:		MyntFailureHandler)	/**	 * 支付宝支付	 *	 * @param month  		月份	 */	public func aliPay(month: Int, success: @escaping (SCloudKit.SCPay.SCAlipayParams) -> Swift.Void, failure: MyntFailureHandler)}extension Mynt {		public var isCanEdit: Bool { get }	/**	 * 更新password	 *	 * @param password 绑定密码	 */	public func uploadPassword(password: String, success: MyntSuccessHandler = default, failure: MyntFailureHandler = default)	/**	 * 下载最后一个点	 *	 */	public func downLastLocation(success: MyntSuccessHandler = default, failure: MyntFailureHandler = default)	/**	 * 更新经纬度	 *	 * @param latitude	 * @param longitude	 */	public func uploadLocation(latitude: Double, longitude: Double, radius: Int, success: MyntSuccessHandler = default, failure:		MyntFailureHandler = default)	public func deleteMynt(success: MyntSuccessHandler, failure: MyntFailureHandler)}extension Mynt {		public var isDefaultControlValue: Bool { get }	public var currentControl: MYNTKit.Mynt.Control { get }	/**	 * 切换运动追踪开关	 *	 * @param isTracking 是否运动追踪	 */	public func switchControlSwitch(isEnableControl: Bool, success: MyntSuccessHandler = default, failure: MyntFailureHandler = default)	/**	 	修改控制模式 (会修改control值)	 	*/	public func setControl(control: SCloudKit.SCControlMode, success: MyntSuccessHandler = default, failiure: MyntFailureHandler = default)	/**	 	重置控制模式 (不会修改control值)	 	*/	public func resetControlValue(controlValue: SCloudKit.SCControlMode, success: MyntSuccessHandler = default, failure: MyntFailureHandler = default)	/**	 	修改控制模式对应的值 （不会修改control值）	 	*/	public func setControlValue(controlValue: MYNTKit.Mynt.Control, success: MyntSuccessHandler = default: failure: MyntFailureHandler = default)}extension Mynt {		public var hasNewFirmware: Bool { get }	public var latestFirewareFile: Data? { get }	public var lastestFirmwareVersion: Int { get }	public var lastestFirmwareVersion: String { get } }extension Mynt {		public var uiState: MYNTKit.MYNTUIState { get }}extension Mynt {		public func updateName(name: String, success: MyntSuccessHandler = default, failure: MyntFailureHandler = default)	public func updateAvatar(avatar: UIImage? = default, success: MyntSuccessHandler, failure: MyntFailureHandler)}extension Mynt {		public enum CheckSimProgress : Int {		case none		case mobileBluetooth		case myntConnectState		case mobileNet		case myntSimState		case myntNetState		case end	}	public enum CheckSimError : Error {		case notGPS		case mobileDisconnected		case mobileNetError		case myntNoSim		case myntNetError	}	public func checkSIM(progress: @escaping (MYNTKit.Mynt.CheckSimProgress) -> Swift.Void, failure: @escaping (MYNTKit.Mynt.CheckSimError, Int?)		-> Swift.Void)	public func simNetResult(success: @escaping (Int) -> Swift.Void, failure: MyntFailureHandler)	public func simcardStatus(success: ((SCloudKit.SCSIMState, SCloudKit.SCSIMType, Int) -> Swift.Void)? = default, failure: MyntFailureHandler)}extension Mynt {		/**	 * 注册经纬度监听 (主要用于地图监听， Just for GPS)	 *	 */	public func registerLocationListener(locationBlock: @escaping (MYNTKit.Mynt, SCloudKit.SCDevice.SCLocation) -> Swift.Void)	/**	 * 移除注册经纬度监听 （主要用于地图监听， Just for GPS）	 *	 */	public func unregisterLocationListener()	/**	 * 移除注册经纬度监听 (主要用于地图监听)	 */	public func queryRealTime(success: @escaping (Int, Int) -> Swift.Void, failure: MyntFailureHandler)	/**	 * 开始实时定位	 *	 * @param beginTime 实时定位开启时间	 */	public func startRealTimeLocation(beginTime: Int, reqSessionId: String, success: @escaping (SCloudKit.SCDevice.SCLocation, String, Int, Int)		-> Swift.Void, failure: MyntFailureHandler)	/**	 * 关闭实时定位	 *	 */	public func stopRealTimeLocation(reqSessionId: String, success: @escaping () -> Swift.Void, failure: MyntFailureHandler)}extension Mynt {		/**	 	报丢设备	 	- parameter isLost: 是否丢失	 	*/	public func reportLost(isLost: Bool, success: (() -> Swift.Void)? = default, failure: MyntFailureHandler = default)	/**		设备丢失列表		*/	public func lostAddressList(success: @escaping ([SCloudKit.SCDevice.SCLocation]) -> Swift.Void, failure: MyntFailureHandler)	/**		设备被人找到		*/	public class func lostFoundList(success: @escaping ([MYNTKit.Mynt]) -> Swift.Void, failure: MyntFailureHandler)}extension Mynt {		/**	 * 微信分享授权	 *	 */	public func authorizeWechat(success: @escaping () -> Swift.Void, failure: MyntFailureHandler)	/**	 * 获取分享短链	 *	 * @param type 			分享类型	 * @param latitude		纬度	 * @param longitude 	经度	 */	public func shareLink(type: SCloudKit.SCShareType, latitude: Double, longitude: Double, success: @escaping (String) -> Swift.Void, failure:		MyntFailureHandler)	/**		用户列表		*/	public func shareUsers(success: @escaping ([SCloudKit.SCFriend]) -> Swift.Void, failure: MyntFailureHandler)	/**		分享设备		* @param userId 分享给用户的userID		*/	public func share(userId: String, success: @escaping () -> Swift.Void, failure: MyntFailureHandler)	/**	 	停止分享	 	* @param userId 	分享给设备的userID	 	*/	public func stopShare(userId: String, success: @escaping () -> Swift.Void, failure: MyntFailureHandler)	/**		编辑分享		* @param userId 		分享给用户的userID		* @param privilege		是否可编辑		*/		public func editShare(userId: String, privilege: Bool, success: @escaping () -> Swift.Void, failure: MyntFailureHandler)}extension Mynt {		public var isDefaultUsageValue: Bool { get }	public var currentUsage: MYNTKit.Mynt.Usage { get }	/**		设置场景模式 (会修改usage)		*/	public func setUsage(usage: SCloudKit.SCDeviceUsage, success: MyntSuccessHandler = default, failure: MyntFailureHandler = default)	/** 		重置场景 （不会修改usage）		*/	public func resetUsageValue(usage: SCloudKit.SCDeviceUsage, success: MyntSuccessHandler = default, failure: MyntFailureHandler = default)		/**		修改场景模式对应的值 （不会修改usage）		*/	public func setUsageValue(usageValue: MYNTKit.Mynt.Usage, success: MyntSuccessHandler = default, failure: MyntFailureHandler = default)}/**设备连接类型- NeedPair: 		需要配对- ManualConnect:	手动连接- AutoReconnect:  	自动重连*/@objc public enum MyntConnectType : Int {		case needPair	case ManualConnect	case autoConnect	case bluetoothError}@objc public protocol MyntDelegate : NSObjectProtocol {		@objc optional public func mynt(mynt: MYNTKit.Mynt, didUpdateProperty name: String, oldValue: Any?, newValue: Any?)	@objc optional public func mynt(mynt: MYNTKit.Mynt, didUpdateProperty location: MYNTKit.Mynt.Location)	@objc optional public func mynt(mynt: MYNTKit.Mynt, didUpdateRSSI RSSI: Int)	@objc optional public func mynt(mynt: MYNTKit.Mynt, didUpdateAlarmState isAlarm: Bool)	@objc optional public func didStartConnect(mynt: MYNTKit.Mynt)	@objc optional public func didStartBind(mynt: MYNTKit.Mynt)	@objc optional public func didConnected(mynt: MYNTKit.Mynt)	@objc optional public func mynt(mynt: MYNTKit.Mynt, didDisconnected error: Error?)	@objc optional public func didBluetoothError(mynt: MYNTKit.Mynt)	@objc optional public func didForgetMynt(mynt: MYNTKit.Mynt)	@objc optional public func didFoundNewFirmware(mynt: MYNTKit.Mynt)	@objc optional public func didEnterLowPower(mynt: MYNTKit.Mynt)}public typealias MyntFailureHandler = SCFailedHandlerpublic class MyntParaConfig : NSObject {		public static let shared: MYNTKit.MyntParamConfig	public func getAlarmDelay(sensitivity: SCloudKit.SCSensitivity) -> Int	public func setAlarmDelay(sensitivity: SCloudKit.SCSensitivity, value: Int)	public func getLocationFrequency(frequency: SCloudKit.SCLocationFrequency) -> Int	public func setLocationFrequency(frequency: SCloudKit.SCLocationFrequencym value: Int)}public typealias MyntSuccessHandler = ((MYNTKit.Mynt?) -> Swift.Void)?/** 小觅的同步状态 - None: 	无 - Delete:  删除设备 - Add: 	添加设备 - Update:  更新设备 */@objc public enum MyntSyncState : Int {		case temp	case none	case delete	case add	case update}public typealias SLLocationFailureHandler = (INTULocationStatus) -> Swift.Voidpublic typealias SLLocationFailureHandler = (CLLocation, INTULocationAccuracy, INTULocationStatus) -> Swift.Voidpublic class SafeZone : SlightechKit.SKSQLiteModel {		//云端ID	public var locationID: String	//安全区域名字	public var name: String	//类型 (0-custom 1-home 2-offline)	public var locationType: SCloudKit.SCDeviceLocation	//策略类型 0-none 1-wifi 2-gps	public var strategyType: SCloudKit.SCSecure	//SSID	public var wifiSSID: String	//地理位置名字	public var addressName: String	//经纬度	public var latitude: Double	public var longitude: Double	override public var sk_primaryKeys: [String] { get }	public var showName: String { get }	//显示值 （wifi -> ssid, gps -> location）	public var showValue: String { get }	public var isEmpty: Bool { get }	/**	 	创建wifi安全区域	 	- paramter name:	 	- parameter wifiSSID:	 	- returns:	 	*/	public class func create(name: String, wifiSSID: String, locationType: SCloudKit.SCDeviceLocation = default) -> MYNTKit.SafeZone	override public func update() -> Bool	override public func insert() -> Bool	override public func delete() -> Bool }@objc public enum SafeZoneCloudState : Int {		case none	case delete	case add	case update}@objc public protocol safeZoneDelegate : NSObjectProtocol {		@objc optional public func didUpdateZone(safeZone: MYNTKit.SafeZone)	@objc optional public func didAddSafeZone(safeZone: MYNTKit.SafeZone)	@objc optional public func didRemoveSafeZone(safeZone: MYNTKit.SafeZone)}@objc pubic enum SafeZoneState ; Int {		case enter	case exit}public typealias ScanHandler = (MYNTKit.Mynt, Bool) -> Swift.Voidpublic class TestLocation : SlightechKit.SKSQLiteModel {		required public init()	public init(location: CLLocation)	public var latitude: CLLocationDegress	public var longitude: CLLocationAccuracy	public var horizontalAccuracy: CLLocationAccuracy	public var verticalAccuracy: CLLocationAccuracy	public var altitude: CLLocationDistance	public var course: CLLocationDirection	public var speed: CLLocationSpeed	public var note: String	public var time: Int	public var timeString: String}public class User: SlightechKit.SKSQLiteModel {		public var userName: String	public var email: String	public var privilege: Bool	override public var sk_primaryKeys: [String] { get }	public var avatar: UIImage?	public var userId: String { get }}extension class User : SlightechKit.SKSQLiteModel {		public var userName: String	public var email: String	public var privilege: Bool	override public var sk_primaryKeys: [String] { get }	public var avatar: UIImage?	public var userId: String { get }}extension User {		/**		查询用户		* @param userName 用户名		*/	public class func queryUser(userName: String, success: @escaping ([MYNTKit.User]) -> Swift.Void, failure: ((Int, String?) -> Swift.Void)?)	public var qaParams: [String : String] { get }	/**		登录		- parameter email: 		email description		- parameter password:	password description		- parameter success:	success description		- parameter failure: 	failure description		*/	public class func login(email: String, password: String, success: @escaping (Bool) -> Swift.Void, failure: @escaping (Int, String?) -> Swift.Void)	/**		确认登陆		*/	public class func conformLogin(success: @escaping () -> Swift.Void, failure: @escaping (Int, String?) -> Swift.Void)	/**		检测uuid		*/	public class func checkUUID(success: @escaping (Bool) -> Swift.Void, failure: @escaping (Int, String?) -> Swift.Void)	/**	 	注册	 	- parameter email: 			邮箱	 	- parameter userName: 		用户名	 	- parameter password: 		密码	 	- parameter success:	 	- parameter failure:	 	*/	public class func register(email: String, userName: String, password: String, success: @escaping (MYNTKit.User?) -> Swift.Void, failure:		@escaping (Int, String?) -> Swift.Void)	}