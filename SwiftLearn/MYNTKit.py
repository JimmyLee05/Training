import AVFoundationimport FMDBimport Foundationimport INTULocationManagerimport MYNTKit.I18nManagerimport MYNTKit.MTBluetoothimport MYNTKit.MTKeyUtilsimport MYNTKit.MTSystemimport MYNTKit.MTNTKitimport MYNTKit.NSImage_Grayimport MYNTKitimport MYNTKit.Swiftimport MapKitimport MediaPlayerimport MyntCoreBluetoothimport MyntCoreBluetooth.STPrivateFunctionimport Realmimport RealmSwiftimport SCloundKitimport SlightechKitimport SwiftOnoneSupportimport SystemConfiguration.CaptiveNetworkimport SystemConfigurationimport UIKit//! Project version number for MYNTKitpublic var MYNTKitVersionNumber: Doubleextension SCControlMode : EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}extension SCControlMode {		public var smallAvatar: UIImage? { get }}extension SCClickValue {		public var name: String { get }	public var smallAvatar: UIImage? { get }}extension UIView {		/**	震动	*/	public func shake(dValue: CGFloat = default, repeatCount: Float = default)}extension UIView {		/**	波纹动画	- parameter color: 波纹颜色	*/	public func rippleAnimate(color: UIColor, scale: CGFloat)}extension SCLocationFrequency {		public static var all: [SCloundKit.SCLocationFrequency]	public init(value: Int?)	public var time: Int { get }}extension SCLocationFrequency : EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}extension SCSensitivity {		public static var all: [SCloundKit.SCSensitivity]	public init(value: Int?)	//延迟时间(秒)	public var alarmDelay: Int { get }}extension SCSensitivity : EnumPropertyProtocol {		//名字	public var name: String { get }	public var image: UIImage? { get }}extension CALayer {		public func shake(dValue: CGFloat = default, duration: CFTimeInterval = default, repeatCount: Float = default)}extension UIImage {		public class func create(with radius: CGFloat, padding: CGFloat = default, icon: UIImage?, color: MYNTKit.GradientColor? = default) ->		UIImage?}extension SCDeviceUsage {		public init(value: Int?)	public var myntName: String { get }	public func myntAvatar(mynt: MYNTKit.Mynt) -> UIImage?	public var usageColor: MYNTKit.GradientColor { get }}extension SCDeviceUsage {		public static var all: [SCloundKit.SCDeviceUsage] { get }	public func defaultValue(sn: String) -> MYNTKit.Mynt.Usage }extension SCDeviceUsage: EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}/**硬件类型- CC25: CC2541- CC26: CC2640- CC26SE: CC2640 精简- CC26GPS: CC2640 + GPS*/extension MYNTHardwareType {		public var name: String { get }	public var myntType: SCloundKit.SCDeviceType { get }}extension SCDeviceAlarm {		public static var all: [SCloundKit.SCDeviceAlarm]	public init(value: Int?)	//报警次数(次数)	public var alarmCount: Int { get }	//铃声文件名	public var soundName: String { get }}extension SCDeviceAlarm : EnumPropertyProtocol {		//名字	public var name: String { get }	public var image: UIImage? { get }}extension SCloundKit.SCPay.SCOrder {		/**	 *	 *	 */	 public func orderDetail(success: @escaping {SCloudKit.SCPay.SCOrder} -> Swift.Void, failure: MyntFailureHandler)}extension SCDeviceType {		public var name: String { get }	public var typeName: String { get }	public var hardwareTypes: [MYNTHardwareType] { get }}extension SCControlMode {		public static var all: [SCloudKit.SCControlMode]	public func defaultValue(sn: String) -> MYNTKit.Mynt.Control}public class AlarmManager : NSObject, AVAudioPlayerDelegate {		public static let shared: MYNTKit.AlarmManager	/**	执行报警	- parameter soundName: 报警音乐名	*/	public func execAlarm(_ soundName: String?)	/**	取消报警	*/	public func cancelAlarm()	/**	查找手机	- parameter loops: 是否重复播放	*/	public func execFindPhone(_ loops: Bool = default)	/**	停止查找小觅	*/	public func cancelFindPhone()	public func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool)}//主题色public class ColorStyle {		public static let kTunaColor: UIColor	public static let kWriteColor: UIColor	public static let kTunaGradientColor: MYNTKit.GradientColor	public static let kBlueGradientColor: MYNTKit.GradientColor	public static let kRedGradientColor: MYNTKit.GradientColor	public static let kGreenGradientColor: MYNTKit.GradientColor	public static let kOfflineGradientColor: MYNTKit.GradientColor	public static let kGoldTips: MYNTKit.GradientColor	public static let kOrange: MYNTKit.GradientColor	public static let kPortlandOrange: MYNTKit.GradientColor	public static let kCarminePink: MYNTKit.GradientColor	public static let kOliveHaze: MYNTKit.GradientColor	public static let kMantis: MYNTKit.GradientColor	public static let kShamrock: MYNTKit.GradientColor	public static let kSpiroDiscoBall: MYNTKit.GradientColor	public static let kDarkElectricBlue: MYNTKit.GradientColor	public static let kFrenchRose: MYNTKit.GradientColor	public static let kSoftPurple: MYNTKit.GradientColor	public static let kMediumSlateBlue: MYNTKit.GradientColor}