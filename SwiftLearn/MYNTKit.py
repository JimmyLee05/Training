import AVFoundationimport FMDBimport Foundationimport INTULocationManagerimport MYNTKit.I18nManagerimport MYNTKit.MTBluetoothimport MYNTKit.MTKeyUtilsimport MYNTKit.MTSystemimport MYNTKit.MTNTKitimport MYNTKit.NSImage_Grayimport MYNTKitimport MYNTKit.Swiftimport MapKitimport MediaPlayerimport MyntCoreBluetoothimport MyntCoreBluetooth.STPrivateFunctionimport Realmimport RealmSwiftimport SCloundKitimport SlightechKitimport SwiftOnoneSupportimport SystemConfiguration.CaptiveNetworkimport SystemConfigurationimport UIKit//! Project version number for MYNTKitpublic var MYNTKitVersionNumber: Doubleextension SCControlMode : EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}extension SCControlMode {		public var smallAvatar: UIImage? { get }}extension SCClickValue {		public var name: String { get }	public var smallAvatar: UIImage? { get }}extension UIView {		/**	震动	*/	public func shake(dValue: CGFloat = default, repeatCount: Float = default)}extension UIView {		/**	波纹动画	- parameter color: 波纹颜色	*/	public func rippleAnimate(color: UIColor, scale: CGFloat)}extension SCLocationFrequency {		public static var all: [SCloundKit.SCLocationFrequency]	public init(value: Int?)	public var time: Int { get }}extension SCLocationFrequency : EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}extension SCSensitivity {		public static var all: [SCloundKit.SCSensitivity]	public init(value: Int?)	//延迟时间(秒)	public var alarmDelay: Int { get }}extension SCSensitivity : EnumPropertyProtocol {		//名字	public var name: String { get }	public var image: UIImage? { get }}extension CALayer {		public func shake(dValue: CGFloat = default, duration: CFTimeInterval = default, repeatCount: Float = default)}extension UIImage {		public class func create(with radius: CGFloat, padding: CGFloat = default, icon: UIImage?, color: MYNTKit.GradientColor? = default) ->		UIImage?}extension SCDeviceUsage {		public init(value: Int?)	public var myntName: String { get }	public func myntAvatar(mynt: MYNTKit.Mynt) -> UIImage?	public var usageColor: MYNTKit.GradientColor { get }}extension SCDeviceUsage {		public static var all: [SCloundKit.SCDeviceUsage] { get }	public func defaultValue(sn: String) -> MYNTKit.Mynt.Usage }extension SCDeviceUsage: EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}/**硬件类型- CC25: CC2541- CC26: CC2640- CC26SE: CC2640 精简- CC26GPS: CC2640 + GPS*/extension MYNTHardwareType {		public var name: String { get }	public var myntType: SCloundKit.SCDeviceType { get }}extension SCDeviceAlarm {		public static var all: [SCloundKit.SCDeviceAlarm]	public init(value: Int?)	//报警次数(次数)	public var alarmCount: Int { get }	//铃声文件名	public var soundName: String { get }}extension SCDeviceAlarm : EnumPropertyProtocol {		//名字	public var name: String { get }	public var image: UIImage? { get }}extension SCloundKit.SCPay.SCOrder {		/**	 *	 *	 */	 public func orderDetail(success: @escaping {SCloudKit.SCPay.SCOrder} -> Swift.Void, failure: MyntFailureHandler)}extension SCDeviceType {		public var name: String { get }	public var typeName: String { get }	public var hardwareTypes: [MYNTHardwareType] { get }}extension SCControlMode {		public static var all: [SCloudKit.SCControlMode]	public func defaultValue(sn: String) -> MYNTKit.Mynt.Control}public class AlarmManager : NSObject, AVAudioPlayerDelegate {		public static let shared: MYNTKit.AlarmManager	/**	执行报警	- parameter soundName: 报警音乐名	*/	public func execAlarm(_ soundName: String?)	/**	取消报警	*/	public func cancelAlarm()	/**	查找手机	- parameter loops: 是否重复播放	*/	public func execFindPhone(_ loops: Bool = default)	/**	停止查找小觅	*/	public func cancelFindPhone()	public func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool)}//主题色public class ColorStyle {		public static let kTunaColor: UIColor	public static let kWriteColor: UIColor	public static let kTunaGradientColor: MYNTKit.GradientColor	public static let kBlueGradientColor: MYNTKit.GradientColor	public static let kRedGradientColor: MYNTKit.GradientColor	public static let kGreenGradientColor: MYNTKit.GradientColor	public static let kOfflineGradientColor: MYNTKit.GradientColor	public static let kGoldTips: MYNTKit.GradientColor	public static let kOrange: MYNTKit.GradientColor	public static let kPortlandOrange: MYNTKit.GradientColor	public static let kCarminePink: MYNTKit.GradientColor	public static let kOliveHaze: MYNTKit.GradientColor	public static let kMantis: MYNTKit.GradientColor	public static let kShamrock: MYNTKit.GradientColor	public static let kSpiroDiscoBall: MYNTKit.GradientColor	public static let kDarkElectricBlue: MYNTKit.GradientColor	public static let kFrenchRose: MYNTKit.GradientColor	public static let kSoftPurple: MYNTKit.GradientColor	public static let kMediumSlateBlue: MYNTKit.GradientColor}public protocol EnumPropertyProtocol {		public var name: String { get }	public var image: UIImage? { get }}/**固件类型- BLE: BLE模式- HID: HID模式*/public enum Firmware {		case ble	case hid	public var name : String { get }}/** * 渐变色 */public struct GradientColor {		public var start: UIColor	public var end: UIColor	public init(start: UIColor, end: UIColor)	public init(color: String)	public var hexString: String { get }}public class JPushManager : NSObject {		public static let shared: MYNTKit.JPushManager	weak public var delegate: JPushManagerDelegate?	public func didReceiveNotification(type: JPushType, info: [AnyHashable : Any])}public protocol JPushManagerDelegate : NSObjectProtocol {		public func push(manager: MYNTKit.JPushManager, didRegisterAlias alias: String?)	public func push(manager: MYNTKit.JPushManager, didRegisterTags tags: [String])	public func push(manager: MYNTKit.JPushManager, didRemoveLocationNotification key: String?)}public class MKImageCache : NSObject {		public static let shared: MYNTKit.MKImageCache	public func downUserAvatar(url: String, handler: @escaping (UIImage?) -> Swift.Void)	public func down(url: String, handler: @escaping (UIImage?) -> Swift.Void)	pubic func load(key: String, handler: @escaping (UIImage?) -> Swift.Void)	public func save(key: String, image: UIImage?)}public func MTLocalizedString(_ key: String, comment: String) -> String/**设备丢失状态- Normal: 正常状态- ReportLost: 报丢状态*/@objc public enum MTMyntLostState : Int {		case normal	case reportLost}public class MTPushMessage : NSObject {		public class func sendMessage(image: UIImage? = default, title: String, subtitle: String)}public class MYNTKit : NSObject {		public static let shared MYNTKit.MYNTKit	public var state: CBCentralManagerState { get }	public var mynts: [MYNTKit.Mynt] { get }	public var user: MYNTKit.User? { get }	public var safeZones: [MYNTKit.SafeZone] { get }	public var isCloseAlarmInSafeZone: Bool	public func initMYNTKit(complete: @escaping () -> Swift.Void)	public func registerJPush()}extension MYNTKit : INTULocationManagerDelegate {		public func locationManager(_ manager: INTULocationManager, didPrintLog log: String)}extension MYNTKit {		public func addMyntKitDelegate(key: String, delegate: MyntKitDelegate)	public func removeMyntKitDelegate(key: String)}extension MYNTKit {		/**		搜索小觅（进行蓝牙搜索）		*/	public func startScan()	/**		搜索小觅 (仅用于搜索新设备)		*/	public func startScanNewMynt(handler: @escaping MYNTKit.ScanHandler)	/**		停止搜索小觅（仅用于搜索新设备）		*/	public func stopScanNewMynt()}extension MYNTKit : SCloudDelegate {		public func cloud(cloud: SCloudKit.SCloud, didRequest url: String, time: TimeInterval)	public func cloud(cloud: SCloudKit.SCloud, didPrintLog log: String)}@objc public protocol MYNTKitDelegate : MyntDelegate, UserDelegate, SafeZoneDelegate {		@objc optional public func myntKit(myntKit: MYNTKit.MYNTKit, didUpdateCentralState state: CBCentralManagerState)	@objc optional public func myntKit(myntKit: MYNTkit.MYNTKit, didAddMynt mynt: MYNTKit.Mynt)	@objc optional public func myntKit(myntkit: MYNTKit.MYNTKit, didRemoveMynt mynt: MYNTKit.Mynt)	@objc optional public func myntKit(myntKit: MYNTKit.MYNTKit, didFoundNewSafeZone safeZone: MYNTKit.SafeZone)	@objc optional public func myntKit(myntKit: MYNTKit.MYNTkit, didReceverAd url: String)}public enum MYNTKitError : Error {		case notGPS}@objc public enum MYNTUIState : Int {		case none	case online	case offline	case report	case connecting}public class MapNavigationKit : NSObject {		public enum MapType {		case apple		case google		case baidu		case amap		case tencent	}	public static let shared: MYNTKit.MapNavigationKit	public func selectMapApp(fromCoordinate: CLLocationCoordinate2D, toCoordinate: CLLocationCoordinate2D, view: UIView)} 